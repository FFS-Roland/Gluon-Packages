#!/bin/sh
SEGSET=/tmp/.seg.ffs

ME=$(basename $0)
if [ $(ps | grep -c "$ME") -gt 4 ]; then
  logger -s -t $ME "started twice"
  exit 1
fi
if [ ! -d "/proc/$(cat /var/run/fastd.mesh_vpn.pid)" ]; then
  logger -t $ME "fastd not running"
  exit 0
fi
if [ "$(uci get fastd.mesh_vpn_backbone.auto_segment)" = "0" ]; then
  logger -t $ME "auto_segment disabled"
  exit 0
fi
if [ "$(cat /proc/uptime | cut -d'.' -f1)" -lt 60 ]; then
  logger -t $ME "waiting for batman"
  exit 0
fi

NODEID=$(uci get network.bat0.macaddr | sed 's/://g')
PUBKEY=$(/etc/init.d/fastd show_key mesh_vpn | cut -c1-12)
BATSEG=$(batctl gwl | grep '02:00:3' | tail -1 | sed 's/:0/:/g' | cut -d':' -f4)
GITSEG=$(nslookup ffs-${NODEID}-${PUBKEY}.segassign.freifunk-stuttgart.de ::1#54 | grep "2001:2:0:711::" | cut -d':' -f7)

if [ -z "$GITSEG" ]; then
  if [ -f $SEGSET ]; then
    GITSEG=$(cat $SEGSET)
    logger -t $ME "Node is in Segment: $GITSEG"
  else
    logger -t $ME "Node not registered"
    GITSEG=99
  fi
else
  if [ -n "$BATSEG" ] && [ "$BATSEG" != "$GITSEG" ]; then
    logger -t $ME "Avoiding Shortcut"
    GITSEG=99
    rm $SEGSET
  fi
fi

let PORT=GITSEG+10200
CHANGED=0

for i in `seq 1 10`;
do
  GW=$(printf "gw%02d" $i)
  OLDPEER=$(uci get fastd.mesh_vpn_backbone_peer_${GW}.remote)
  NEWPEER=$(printf "\"gw%02ds%02d.gw.freifunk-stuttgart.de\" port %d" $i $GITSEG $PORT)

  if [ "$NEWPEER" != "$OLDPEER" ]; then
    uci set fastd.mesh_vpn_backbone_peer_${GW}.remote="$NEWPEER"
    CHANGED=1
  fi
done

if [ "$CHANGED" = "1" ]; then
  /sbin/ifdown client
  /etc/init.d/fastd restart
  /sbin/ifup client
  echo $GITSEG >$SEGSET
  logger -t $ME "Set Segment: $GITSEG"
else
  logger -t $ME "No changes"
fi
